import numpy as np
from collections import namedtuple

def generate_trajectory(t, waypoints):
    yaw = 0.0;
    yawdot = 0.0;
    pos = np.zeros(3)
    acc = np.zeros(3)
    vel = np.zeros(3)
    

    DesiredState = namedtuple('DesiredState', 'pos vel acc yaw yawdot')
    return  DesiredState(pos, vel, acc, yaw, yawdot)


# Minimum Snap trajectory algorithm 
def MST(waypoints):
    # a full trajectory across N+1 waypoint is made of N polynomial line segment.
    # each segment is defined as 7 order polynomial.
    # We have 8 unknown coeffient to solve, so we need 8 equations, which is 8
    # constraints given by MST.

    # Pi = ai_0 + ai1*t + ai2*t^2 + ai3*t^3 + ai4*t^4 + ai5*t^5 + ai6*t^6 + ai7*t^7 
    # design a A matrix 8x8, which is the coeffient-coeffient matrix, each
    # element is a variable, function of t and k-derivative.

    # Each piece-wise function pi, has different coefficient a0, a1...a7  
    # Coefficient is a 8xN matrix, each column represent the coefficient set 
    # for the i-th line segment.

    # Coefficient = 
    # [a10 a20 ... aN0
    #  a11 a21 ... aN1 
    #  a12 a22 ... aN2
    #   .   .       .
    #  a17 a27 ... aN7]

    # A matrix 8x8 can be programatically generated by the 8 constraints we have. 
    


    # A*Coeffient = B
    # Coefficient = B*A.inverse()





    





